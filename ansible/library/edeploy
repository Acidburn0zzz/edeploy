#!/usr/bin/env python
#
# Copyright (C) 2013-2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

'''Ansible module for eDeploy upgrade logic.'''

import shlex


def parse_edeploy_conf(arguments):
    lis = [''.join(shlex.split(line)).split('=')
           for line in arguments.split('\n') if line.find('=') != -1]
    return {key: value for (key, value) in lis}


def get_version(params):
    conf = parse_edeploy_conf(file(params['conffile']).read(-1))
    return conf["VERS"]


def version_cmd(module):
    return {'changed': False, 'version': get_version(module.params)}


def list_cmd(module):
    rc, stdout, stderr = module.run_command('edeploy list', check_rc=True)
    return {'changed': False, 'versions': stdout.strip().split('\n')}


def upgrade_cmd(module):
    version = module.params['version']
    if version == get_version(module.params):
        return {'changed': False, 'version': version}
    else:
        rc, stdout, stderr = module.run_command('edeploy upgrade %s' % version,
                                                check_rc=True)
        return {'changed': True, 'version': version}


def main():
    module = AnsibleModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent']),
            conffile=dict(default='/var/lib/edeploy/conf'),
            command=dict(default='version', choices=['version',
                                                     'list',
                                                     'upgrade']),
            version=dict(),
            )
        )
    args = []
    kwd = globals()[module.params['command'] + '_cmd'](module)
    module.exit_json(*args, **kwd)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

if __name__ == "__main__":
    main()

# edeploy ends here
