pin_repository() {
  local dist=$1
  local dir=$2
  local repo=$3
  local priority=$4
  local archive=$5
  local codename=$6
  local component=$7

  check_usage $# 7 "pin_repository <dist> <chroot> <reponame> <priority> <archive> <codename> <component>"

  if [ ! -z "${repo}" ] && [ ! -z "${priority}" ];then
    case "$dist" in
      $supported_debian_dists|$supported_ubuntu_dists)
        cat > $dir/etc/apt/preferences <<EOF
Package: *
Pin: release a=$archive,n=$codename,c=$component
Pin: origin $repo
Pin-Priority: $priority
EOF
    esac
  fi

}

add_main_repository() {
  local dist=$1

  check_usage $# 1 "add_main_repository <dist>"

  if [ -n "$REPOSITORY" -a "$dist" != redhat ]; then
    echo "$REPOSITORY"
    return
  fi

  case "$dist" in
    $supported_debian_dists)
        echo "http://http.debian.net/debian"
        return 0
    ;;
    $supported_ubuntu_dists)
        echo "http://archive.ubuntu.com/ubuntu"
        return 0
    ;;
    $supported_centos_dists)
        echo "http://mirror.centos.org/centos/6.5/os/x86_64/Packages/centos-release-6-5.el6.centos.11.1.x86_64.rpm"
        return 0
    ;;
    $supported_redhat_dists)
        if [ -n "$ISO_PATH" ]; then
            # We use the target variable here since we shall provide the path from the chroot, not from the host
            echo "${target}/repo/Packages/redhat-release-server-6Server-6.5.0.1.el6.x86_64.rpm"
        else
            echo "${REPOSITORY}/Packages/redhat-release-server-6Server-6.5.0.1.el6.x86_64.rpm"
        fi
        return 0
    ;;
    *)
        return 1
    ;;
  esac
}

EPEL_RELEASE=6-8
add_epel_repository() {
  local dist=$1

  check_usage $# 1 "add_epel_repository <dist>"

  case "$dist" in
    $supported_centos_dists|$supported_redhat_dists)
	install_packages $dir http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-$EPEL_RELEASE.noarch.rpm
	;;
  esac
}

remove_epel_repository() {
  local dist=$1

  check_usage $# 1 "remove_epel_repository <dist>"

  case "$dist" in
    $supported_centos_dists|$supported_redhat_dists)
        remove_packages $dir epel-release-$EPEL_RELEASE
    ;;
  *)
    ;;
  esac
}

unregister_rhn() {
    local dist=$1
    local target=$2
    local cmd=${ORIG}/remove_system_on_rhn

    check_usage $# 2 "unregister_rhn <dist> <target>"

    # Let's to the basic tests here
    # This have only a meaning for redhat systems
    case "$dist" in
        $supported_redhat_dists)

        # Let's remove the systemid from the chroot
        if [ -f $target/etc/sysconfig/rhn/systemid ]; then
            rm -f $target/etc/sysconfig/rhn/systemid || fatal_error "Cannot delete systemid in unregister_rhn()"
        fi

        if [ ! -x $cmd ]; then
            fatal_error "$cmd is mandatory to remove the rhn repository"
        fi
        # Let's be sure that delete-old-systems-interactive can be run on the system
        $cmd 2>&1 | grep -qi failed && fatal_error "$cmd is missing dependencies"
        ;;
        *)
        return
        ;;
    esac

    do_chroot $target yum-config-manager --disable rhel-6-server-optional-rpms
    remove_packages $target yum-utils
    $cmd --system=edeploy-$HOSTNAME --user=$RHN_USERNAME --password=$RHN_PASSWORD
    if [ "$?" != "0" ]; then
        echo "Failed at removing system from rhn"
    fi
}

add_rhn_channel() {
      local channel=$1

      check_usage $# 1 "add_rhn_channel <channel>"

      yum_channel=$(echo $channel | rev | cut -d "-" -f 2- | rev)
      yum_channel="${yum_channel}-rpms"
      do_chroot $dir rhn-channel --add --channel=$channel -u $RHN_USERNAME -p $RHN_PASSWORD
      install_packages $dir "yum-utils"
      do_chroot $dir yum-config-manager --enable $yum_channel
      update_system $dir
}

add_rhn_repository() {
  local dist=$1

  check_usage $# 1 "add_rhn_repository <dist>"

  # We shall not care is no real DIST is set
  # This is used by upgrade-from
  if [ "$dist" = "NODIST" ]; then
      return
  fi

  # Nested call, do not register multiple times
  if [ "$src" = "$dir" ]; then
      return
  fi

  case "$dist" in
    $supported_redhat_dists)
      if [ -z "$RHN_USERNAME" ] || [ -z "$RHN_PASSWORD" ]; then
        echo "You should provide RHN_USERNAME and RHN_PASSWORD to get a rhn support"
        return
      fi

      if [ ! -f "$target/etc/sysconfig/rhn/systemid" ]; then
          install_packages $dir rhn-setup
          do_chroot $dir rhnreg_ks --profilename=edeploy-$HOSTNAME --username=$RHN_USERNAME --password=$RHN_PASSWORD
          add_rhn_channel rhel-x86_64-server-optional-6
      fi
    ;;
  *)
    ;;
  esac
}

update_repositories() {
    case "$(package_tool)" in
        apt)
            do_chroot $dir apt-get update
        ;;
        yum)
            do_chroot $dir yum check-update || true
        ;;
        *)
            fatal_error "$(package_tool) isn't supported in update_repositories()"
        ;;
    esac
}

disable_repository() {
    local repository=$1

    check_usage $# 1 "disable_repository <repository>"

    case "$(package_tool)" in
        apt)
        ;;
        yum)
            do_chroot $dir yum-config-manager --disable $repository
        ;;
        *)
            fatal_error "$(package_tool) isn't supported in disable_repository()"
        ;;
    esac
}
