#!/bin/bash
#
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

VERBOSE=0

. init.common
exec 3>&1
exec 4>&2

exec > /log 2>&1

tail -f /log > /dev/console &
tpid=$!


################################################################################

step "Create directories"
create_main_directories
rm -rf /var/lock
mkdir -p /var/lock

step "Mounting virtual fs"
mount_virtual_fs

eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^DEBUG=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^VERBOSE=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^NOREBOOT=")

if [ "$VERBOSE" = 1 ]; then
    set -x			# show commands
fi

grep -q '\<quiet\>' /proc/cmdline || log "Loading, please wait..."

step "Starting services"
if [ -x /etc/init.d/sysklogd ]; then
    /etc/init.d/sysklogd start
fi

if [ -x /etc/init.d/klogd ]; then
    /etc/init.d/klogd start
fi

# It's all over netlink now
echo "" > /proc/sys/kernel/hotplug

step "Start Udev"
# Start the udev daemon to process events
/sbin/udevd --daemon --resolve-names=never

# Iterate sysfs and fire off everything; if we include a rule for it then
# it'll get handled; otherwise it'll get handled later when we do this again
# in the main boot sequence.
( /sbin/udevadm trigger --action=add --subsystem-match=block; \
  /sbin/udevadm trigger --action=add --subsystem-nomatch=block; ) &

################################################################################
# Use the system tag to find the role
################################################################################
serial="$(dmidecode -s system-serial-number)"

################################################################################
# Hardware detection starts here
################################################################################

probe_pci_devices

step "Starting networking"

if [ "$DEBUG" = 1 ]; then
    create_keys
    /etc/init.d/ssh start
fi

probe_network_devices

ip a

# This is the default value for both SERV & RSERV
SERV=10.0.0.1
HSERV=
HSERV_PORT=80
RSERV=
RSERV_PORT=873
HTTP_PORT=80
HTTP_PATH=/cgi-bin/

# Unless you override one or the other via the cmdline
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PATH=")

if [ -z "$RSERV" ]; then
    RSERV="$SERV"
fi

################################################################################
step "Detecting hardware"

cd /
./detect.py > /hw.py

show_kernel_modules
################################################################################
# Send the detected hardware to the server and receive a configuration script
# if there is a match on the server else stop.
################################################################################

step "Configuring system via server ${SERV}"
curl -s -S -o/configure -F file=@/hw.py http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py &
#Saving curl's PID
PID="$!"

log_n "Awaiting eDeploy server :"
while [ ! -z "$(pidof curl)" ]
    do log_n "."
    sleep 1
done
log "done"

#Let's grab curl's return code based on it's pid
wait $PID
RET_CODE=$?
if [ "$RET_CODE" != "0" ]; then
    give_up "Curl exited as failed ($RET_CODE). Cannot get a configuration from http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py'"
fi

if [ ! -f /configure ]; then
    give_up "edeploy server ${SERV} didn't provide any answer, looks like something is wrong on server side !"
fi

chmod +x /configure

d=/chroot
p=/post_rsync

mkdir -p $d
mkdir -p $p/etc/{init,network,default}

if /configure; then

    . /vars

    if [ -n "$ROLE" -a -n "$VERS" ]; then
	if [ ! -z "$HSERV" ]; then
	    log_n "Transfering files from http://${HSERV}/install/${ROLE}-${VERS}.edeploy..."
	    curl -s -S http://${HSERV}:${HSERV_PORT}/install/${ROLE}-${VERS}.edeploy | gzip -d | tar x -C $d
	else
	    log_n "Copying files from rsync://${RSERV}:${RSERV_PORT}/install/${VERS}/${ROLE}..."
	    rsync -a rsync://${RSERV}:${RSERV_PORT}/install/${VERS}/${ROLE}/ $d/
	fi
	echo "SERV=${SERV}" >> $d/var/lib/edeploy/conf
	echo "RSERV=${RSERV}" >> $d/var/lib/edeploy/conf
	echo "RSERV_PORT=${RSERV_PORT}" >> $d/var/lib/edeploy/conf
	log "done"

	log "Installing post_rsync files"
	rsync -avHP $p/* $d/

	if [ -r /modules ]; then
	    cat /modules >> $d/etc/modules
	fi

	if [ -n "${METADATA_URL}" ]; then
	    sed -i -e "s@GRUB_CMDLINE_LINUX_DEFAULT=.*@GRUB_CMDLINE_LINUX_DEFAULT=\"ds=nocloud-net\\\\;s=${METADATA_URL}\"@" $d/etc/default/grub
	fi

	mount -obind /dev $d/dev
	mount -obind /proc $d/proc
	mount -obind /sys $d/sys

	if [ -d $d/var/log ]; then
	    cp -p /log $d/var/log/install.log
	    cp -p /vars /hw.py $d/var/log/
	fi

	#If the disk name doesn't have any /dev/ naming let's add it
	echo "$DISK" | grep '^/dev/' || DISK="/dev/$DISK"
	export DISK
	DISK_BASE=$(basename $DISK)
	SER=$(cat /sys/block/$DISK_BASE/device/rev)
	MODEL=$(cat /sys/block/$DISK_BASE/device/model)
	VENDOR=$(cat /sys/block/$DISK_BASE/device/vendor)
	echo  "################################################################################################"
	echo  "# Installing grub  on device ${DISK} which is a $MODEL from $VENDOR with SN=$SER"
	echo  "################################################################################################"
	sleep 3
	if [ -e "${d}/etc/redhat-release" ]; then
		chroot $d /bin/bash -c "cat /proc/mounts > /etc/mtab"
		chroot $d /bin/bash -c "/sbin/grub-install ${DISK}"
		ROOT_DEVICE=`mount | grep /chroot | awk '{print $1}'`
		eval `blkid $ROOT_DEVICE -o export`
		echo "default=0"  > ${d}/boot/grub/grub.conf
		echo "timeout=5" >> ${d}/boot/grub/grub.conf
		echo "hiddenmenu">> ${d}/boot/grub/grub.conf
		for kernel in ${d}/boot/vmlinuz-*; do
			kversion=`echo $kernel | awk -F'vmlinuz-' '{print $NF}'`;
			KERNEL="/boot/vmlinuz-${kversion}"
			INITRD="/boot/initramfs-${kversion}.img"
			TITLE="CentOS (${kversion})"
			echo "title $TITLE" >> ${d}/boot/grub/grub.conf
			echo "	root (hd0,0)" >> ${d}/boot/grub/grub.conf
			echo "	kernel $KERNEL root=UUID=$UUID nomodeset quiet" >> ${d}/boot/grub/grub.conf
			echo "	initrd $INITRD" >> ${d}/boot/grub/grub.conf
		done
		umount $d/sys
		umount $d/dev
		umount $d/proc
		save_log
		sync
		if [ "$DEBUG" != 1 ]; then
			umount -a
			reboot -f
		fi
	elif chroot $d /bin/bash -c "/usr/sbin/grub-install ${DISK}"; then
			chroot $d /bin/bash -c "/usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg"
		umount $d/sys
		umount $d/dev
		umount $d/proc
		save_log
		sync
		if [ "$DEBUG" != 1 ]; then
		if [ "$NOREBOOT" = 1 ]; then
		    if type -p kexec; then
			echo "Trying kexec..."
			cp $d/boot/vmlinuz* /tmp/vmlinuz
			cp $d/boot/initrd.img* /tmp/initrd.img
			eval $(grep root=UUID= $d/boot/grub/grub.cfg|head -1|tr ' ' '\n'|grep '^root=UUID=')
			umount $d
			if [ -z "$root" ]; then
			    echo "unable to detect root device"
			else
			    kexec -l /tmp/vmlinuz --initrd=/tmp/initrd.img --append="root=$root"
			    kexec -e
			fi
		    fi
		fi
		umount -a
		reboot -f
	    fi
	else
	    log "Install of grub failed"
	fi
    else
	log "No role or version defined..."
    fi
else
    log "Problem during system configuration"
    grep '<!-- ' /configure -A 40 >> /log
fi

save_log

if [ "$DEBUG" = 1 ]; then
    echo "Debug mode, launching an interactive shell"
    exec /bin/bash -i
else
    echo "Shutting down the system in 10 sec"
    sleep 10
    poweroff -f
fi
